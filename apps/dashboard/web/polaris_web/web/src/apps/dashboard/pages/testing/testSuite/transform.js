import { Text } from "@shopify/polaris";
import ShowListInBadge from "../../../components/shared/ShowListInBadge";
import testingTransform from "../../testing/transform";

const transform  = {
    getOwaspTop10List: () => {
        return {
            "Broken Object Level Authorization": ["BOLA"],
            "Broken Authentication": ["NO_AUTH"],
            "Broken Object Property Level Authorization": ["EDE", "MA"],
            "Unrestricted Resource Consumption": ["RL"],
            "Broken Function Level Authorization": ["BFLA"],
            "Unrestricted Access to Sensitive Business Flows": ["INPUT"],
            "Server Side Request Forgery": ['SSRF'],
            "Security Misconfiguration": ["SM", "UHM", "VEM", "MHH", "SVD", "CORS", "ILM"],
            "Improper Inventory Management": ["IAM", "IIM"],
            "Unsafe Consumption of APIs": ["COMMAND_INJECTION", "INJ", "CRLF", "SSTI", "LFI", "XSS", "INJECT"]
        }
    },
    getPrettifiedObj: (testSuiteItem, categoriesCoveredList,  isAutoGenerated=false) => {
        return{
            tests: testSuiteItem?.subCategoryList||[],
            testSuiteName: testSuiteItem?.name||"",
            name: (<Text variant="headingSm" fontWeight="medium" as="h2">{testSuiteItem?.name||""}</Text>),
            id: testSuiteItem?.hexId||"",
            testCount: testSuiteItem?.subCategoryList?.length||0,
            categoriesCovered: (
                <ShowListInBadge
                    itemsArr={[...categoriesCoveredList]}
                    maxItems={3}
                    maxWidth={"250px"}
                    status={"new"}
                    itemWidth={"200px"}
                />
            ),
            isAutoGenerated: isAutoGenerated,
            author: isAutoGenerated? "Akto": testSuiteItem?.createdBy||"",
        };
    },
    getSubCategoryMap: async (LocalStore)=>{

        let metaDataObj = {};
        if ((LocalStore.getState().subCategoryMap && Object.keys(LocalStore.getState().subCategoryMap).length > 0)) {
            metaDataObj = {
                subCategories: Object.values(LocalStore.getState().subCategoryMap),
            }

        } else {
           const fetchedData =  await testingTransform.getAllSubcategoriesData(true, "runTests")
            metaDataObj = {
                subCategories: fetchedData.subCategories,
            }
        }
        const activeTests = metaDataObj?.subCategories?.filter((subCategory) => {return !subCategory.inactive});
        const subCategoryMap = {};

        activeTests.forEach(subCategory => {
            if (!subCategoryMap[subCategory?.superCategory?.name]) {
                subCategoryMap[subCategory.superCategory?.name] = [];
            }
            let obj = {
                label: subCategory.testName,
                value: subCategory.name,
                author: subCategory.author,
                categoryName: subCategory.superCategory.displayName,
                selected: true
            }
            subCategoryMap[subCategory.superCategory?.name].push(obj);
        });

        return subCategoryMap;
    }
}

export default transform;